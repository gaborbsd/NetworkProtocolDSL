{"name":"Protokit","tagline":"","body":"# ProtoKit\r\n\r\nProtoKit is a Domain-Specific Language (DSL) and an accompanying code generator tool for modeling application-level network protocols and generating Java classes to support the protocol in applications. ProtoKit is simple and has a limited functionality but it is useful in practice. Unlike other modeling languages, it does not model interactions in the protocol but focuses only on the message structure. Developing application-level protocols involves mostly this latter task, since the establishment of the connection and other complex interactions are handled by lower layers.\r\n\r\nSo what does ProtoKit actually do? With a concise and simple model, the messages are modeled and ProtoKit generates classes that represent the messages and can be serialized/deserialized with a runtime framework. One can argue that this is quite easy to implement manually but there is a slight paradigm mismatch between the serialization of OO classes and network messages. Namely, the following functionalities are not so trivial to map to OO classes:\r\n* Network messages often use bitfields to save on bandwidth.\r\n* There can be length fields that indicate the length of a variable-length field so that it can be deserialized easily.\r\n* The mapping to the serialized bytestream is strictly specified, general frameworks cannot be used, and so on...\r\nTo overcome these difficulties, ProtoKit takes the concise model and generates the message classes. On one hand, this spares the monotone work of hand-writing these classes and on the other hand, the code generator generates accessors for bitfields and other special features. The logic for the serialization is also included.\r\n\r\n## Modeling a Protocol\r\n\r\nTo do...\r\n\r\n## Running the Generator\r\n\r\nTo do...\r\n\r\n## Using the Generated Classes\r\n\r\nTo do...","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}